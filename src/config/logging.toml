version = 1
disable_existing_loggers = false

# Formatters
[formatters.standard]
format = "%(asctime)s - %(levelname)s - %(name)s - %(message)s"

# Handlers
[handlers.console]
class = "logging.StreamHandler"
level = "ERROR"
formatter = "standard"

[handlers.file1]
class = "logging.handlers.RotatingFileHandler"
level = "DEBUG"
formatter = "standard"
filename = "logs/pynetdicom.log"
maxBytes = 1048576
backupCount = 3

[handlers.file2]
class = "logging.handlers.RotatingFileHandler"
level = "INFO"
formatter = "standard"
filename = "logs/scu.log"
maxBytes = 1048576
backupCount = 3

[handlers.email_proxy]
class = "logging.handlers.SMTPHandler"
level = "ERROR"
formatter = "standard"
mailhost = ['localhost', 8025]
fromaddr = 'error-logger@example.com'
toaddrs = ['admin@example.com']
subject = 'Your application encountered an error'

# Loggers
[loggers.pynetdicom]
handlers = ["console", "file1"]
level = "DEBUG"
propagate = false

[loggers.scu_store]
handlers = ["console", "file2"]
level = "DEBUG"
propagate = false

[loggers.scu_move]
handlers = ["console", "file2", "email_proxy"]
level = "DEBUG"
propagate = false

# Handler for flask_app logger
[handlers.file_flask_app]
class = "logging.handlers.RotatingFileHandler"
level = "INFO"
formatter = "standard"
filename = "logs/flask_app.log"
maxBytes = 1048576
backupCount = 3

# Logger for the Flask application
[loggers.flask_app]
handlers = ["console", "file_flask_app"] # Using console and its own file handler
level = "INFO"
propagate = false
